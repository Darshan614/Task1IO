{"ast":null,"code":"var _s = $RefreshSig$();\nexport const usePagination = _ref => {\n  _s();\n  let {\n    totalCount,\n    pageSize,\n    siblingCount = 1,\n    currentPage\n  } = _ref;\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n    const totalPageNumbers = siblingCount + 5;\n\n    /*\r\n        Case 1:\r\n        If the number of pages is less than the page numbers we want to show in our\r\n        paginationComponent, we return the range [1..totalPageCount]\r\n      */\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    /*\r\n          Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n      */\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n\n    /*\r\n        We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n      */\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    /*\r\n          Case 2: No left dots to show, but rights dots to be shown\r\n      */\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    /*\r\n          Case 3: No right dots to show, but left dots to be shown\r\n      */\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    /*\r\n          Case 4: Both left and right dots to be shown\r\n      */\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["usePagination","_ref","_s","totalCount","pageSize","siblingCount","currentPage","paginationRange","useMemo","totalPageCount","Math","ceil","totalPageNumbers","range","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","DOTS","rightItemCount","rightRange","middleRange"],"sources":["D:/Task1FE/src/Components/usePagination.js"],"sourcesContent":["export const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage,\r\n}) => {\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n        Case 1:\r\n        If the number of pages is less than the page numbers we want to show in our\r\n        paginationComponent, we return the range [1..totalPageCount]\r\n      */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    /*\r\n          Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n      */\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    /*\r\n        We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n      */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    /*\r\n          Case 2: No left dots to show, but rights dots to be shown\r\n      */\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    /*\r\n          Case 3: No right dots to show, but left dots to be shown\r\n      */\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    /*\r\n          Case 4: Both left and right dots to be shown\r\n      */\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n  return paginationRange;\r\n};\r\n"],"mappings":";AAAA,OAAO,MAAMA,aAAa,GAAGC,IAAA,IAKvB;EAAAC,EAAA;EAAA,IALwB;IAC5BC,UAAU;IACVC,QAAQ;IACRC,YAAY,GAAG,CAAC;IAChBC;EACF,CAAC,GAAAL,IAAA;EACC,MAAMM,eAAe,GAAGC,OAAO,CAAC,MAAM;IACpC,MAAMC,cAAc,GAAGC,IAAI,CAACC,IAAI,CAACR,UAAU,GAAGC,QAAQ,CAAC;;IAEvD;IACA,MAAMQ,gBAAgB,GAAGP,YAAY,GAAG,CAAC;;IAEzC;AACJ;AACA;AACA;AACA;IACI,IAAIO,gBAAgB,IAAIH,cAAc,EAAE;MACtC,OAAOI,KAAK,CAAC,CAAC,EAAEJ,cAAc,CAAC;IACjC;;IAEA;AACJ;AACA;IACI,MAAMK,gBAAgB,GAAGJ,IAAI,CAACK,GAAG,CAACT,WAAW,GAAGD,YAAY,EAAE,CAAC,CAAC;IAChE,MAAMW,iBAAiB,GAAGN,IAAI,CAACO,GAAG,CAChCX,WAAW,GAAGD,YAAY,EAC1BI,cAAc,CACf;;IAED;AACJ;AACA;IACI,MAAMS,kBAAkB,GAAGJ,gBAAgB,GAAG,CAAC;IAC/C,MAAMK,mBAAmB,GAAGH,iBAAiB,GAAGP,cAAc,GAAG,CAAC;IAElE,MAAMW,cAAc,GAAG,CAAC;IACxB,MAAMC,aAAa,GAAGZ,cAAc;;IAEpC;AACJ;AACA;IACI,IAAI,CAACS,kBAAkB,IAAIC,mBAAmB,EAAE;MAC9C,IAAIG,aAAa,GAAG,CAAC,GAAG,CAAC,GAAGjB,YAAY;MACxC,IAAIkB,SAAS,GAAGV,KAAK,CAAC,CAAC,EAAES,aAAa,CAAC;MAEvC,OAAO,CAAC,GAAGC,SAAS,EAAEC,IAAI,EAAEf,cAAc,CAAC;IAC7C;;IAEA;AACJ;AACA;IACI,IAAIS,kBAAkB,IAAI,CAACC,mBAAmB,EAAE;MAC9C,IAAIM,cAAc,GAAG,CAAC,GAAG,CAAC,GAAGpB,YAAY;MACzC,IAAIqB,UAAU,GAAGb,KAAK,CACpBJ,cAAc,GAAGgB,cAAc,GAAG,CAAC,EACnChB,cAAc,CACf;MACD,OAAO,CAACW,cAAc,EAAEI,IAAI,EAAE,GAAGE,UAAU,CAAC;IAC9C;;IAEA;AACJ;AACA;IACI,IAAIR,kBAAkB,IAAIC,mBAAmB,EAAE;MAC7C,IAAIQ,WAAW,GAAGd,KAAK,CAACC,gBAAgB,EAAEE,iBAAiB,CAAC;MAC5D,OAAO,CAACI,cAAc,EAAEI,IAAI,EAAE,GAAGG,WAAW,EAAEH,IAAI,EAAEH,aAAa,CAAC;IACpE;EACF,CAAC,EAAE,CAAClB,UAAU,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,WAAW,CAAC,CAAC;EAErD,OAAOC,eAAe;AACxB,CAAC;AAACL,EAAA,CAvEWF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}